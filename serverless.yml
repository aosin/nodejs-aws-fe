service: rsaosin-candies-webapp
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-1

plugins:
  - serverless-finch
  - '@unitsix/serverless-spa-plugin'

custom:
  client:
    bucketName: rsaosin-candies-webapp
    distributionFolder: build
    indexDocument: index.html
  s3LocalPath: ${self:custom.client.distributionFolder}/
  s3BucketName: ${self:custom.client.bucketName}

resources:
  Resources:
    ## Specifying the S3 Bucket
    WebAppS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3BucketName}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
    CloudFrontAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties: 
        CloudFrontOriginAccessIdentityConfig:
          Comment: Static content for Candies webapp (CF)
    ## Specifying the policies to make sure all files inside the Bucket are avaialble to CloudFront
    WebAppS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebAppS3Bucket
        PolicyDocument:
          Statement:
            - Sid: AllowCloudFrontAccessIdentity
              Effect: Allow
              Principal:
                CanonicalUser: !GetAtt CloudFrontAccessIdentity.S3CanonicalUserId
              Action: "s3:GetObject"
              Resource: !Sub "${WebAppS3Bucket.Arn}/*"
    ## Specifying the CloudFront Distribution to server your Web Application
    WebAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Comment:
            Candies! WebApp, CF + Serverless
          Origins:
            - DomainName:
                Fn::Join: [
                  "", [
                    { "Ref": "WebAppS3Bucket" },
                    ".s3.amazonaws.com"
                  ]
                ]
              Id: candies-webapp
              S3OriginConfig:
                OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontAccessIdentity}"
          Enabled: 'true'
          DefaultRootObject: index.html
          HttpVersion: http2
          IPV6Enabled: true

          ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html
          ## The only exception are files that actually exist e.h. app.js, reset.css
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachedMethods:
              - GET
              - HEAD
            # Managed-CachingOptimized policy (well-known id, see https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html):
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
            ## The origin id defined above
            TargetOriginId: candies-webapp
            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`
            ViewerProtocolPolicy: redirect-to-https
            Compress: true
          ## The certificate to use when viewers use HTTPS to request objects.
          ViewerCertificate:
            CloudFrontDefaultCertificate: 'true'
          ## Uncomment the following section in case you want to enable logging for CloudFront requests
          # Logging:
          #   IncludeCookies: 'false'
          #   Bucket: mylogs.s3.amazonaws.com
          #   Prefix: myprefix

  ## In order to print out the hosted domain via `serverless info` we need to define the DomainName output for CloudFormation
  Outputs:
    WebAppS3BucketOutput:
      Value:
        Ref: WebAppS3Bucket
    WebAppCloudFrontDistributionOutput:
      Value:
        Fn::GetAtt: [ WebAppCloudFrontDistribution, DomainName ]
